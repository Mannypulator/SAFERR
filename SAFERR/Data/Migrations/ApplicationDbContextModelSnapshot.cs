// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SAFERR.Data;

#nullable disable

namespace SAFERR.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SAFERR.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("CurrentSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentSubscriptionId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("SAFERR.Entities.BrandSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<int>("CodesGenerated")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uuid");

                    b.Property<int>("VerificationsReceived")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SubscriptionPlanId");

                    b.HasIndex("BrandId", "Status", "StartDate", "EndDate");

                    b.ToTable("BrandSubscriptions");
                });

            modelBuilder.Entity("SAFERR.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Identifier")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SAFERR.Entities.SecurityCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FirstVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsVerified");

                    b.HasIndex("ProductId");

                    b.ToTable("SecurityCodes");
                });

            modelBuilder.Entity("SAFERR.Entities.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxCodesPerMonth")
                        .HasColumnType("integer");

                    b.Property<int>("MaxVerificationsPerMonth")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("SAFERR.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SAFERR.Entities.VerificationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodeAttempted")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SecurityCodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("SourcePhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("VerificationAttemptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CodeAttempted");

                    b.HasIndex("SecurityCodeId");

                    b.HasIndex("SourcePhoneNumber");

                    b.HasIndex("VerificationAttemptedAt");

                    b.HasIndex("VerificationAttemptedAt", "Result");

                    b.ToTable("VerificationLogs");
                });

            modelBuilder.Entity("SAFERR.Entities.Brand", b =>
                {
                    b.HasOne("SAFERR.Entities.BrandSubscription", "CurrentSubscription")
                        .WithOne()
                        .HasForeignKey("SAFERR.Entities.Brand", "CurrentSubscriptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentSubscription");
                });

            modelBuilder.Entity("SAFERR.Entities.BrandSubscription", b =>
                {
                    b.HasOne("SAFERR.Entities.Brand", "Brand")
                        .WithMany("Subscriptions")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAFERR.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("BrandSubscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("SAFERR.Entities.Product", b =>
                {
                    b.HasOne("SAFERR.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("SAFERR.Entities.SecurityCode", b =>
                {
                    b.HasOne("SAFERR.Entities.Product", "Product")
                        .WithMany("SecurityCodes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SAFERR.Entities.User", b =>
                {
                    b.HasOne("SAFERR.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("SAFERR.Entities.VerificationLog", b =>
                {
                    b.HasOne("SAFERR.Entities.SecurityCode", "SecurityCode")
                        .WithMany("VerificationLogs")
                        .HasForeignKey("SecurityCodeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SecurityCode");
                });

            modelBuilder.Entity("SAFERR.Entities.Brand", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("SAFERR.Entities.Product", b =>
                {
                    b.Navigation("SecurityCodes");
                });

            modelBuilder.Entity("SAFERR.Entities.SecurityCode", b =>
                {
                    b.Navigation("VerificationLogs");
                });

            modelBuilder.Entity("SAFERR.Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("BrandSubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
